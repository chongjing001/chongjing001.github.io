<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Linux常用终端命令]]></title>
    <url>%2F2018%2F12%2F22%2FLinux%2F</url>
    <content type="text"><![CDATA[基本指令下面四个为ubantu安装更新命令sudo apt install 软件名 安装软件 sudo apt remove 软件名 卸载软件 sudo apt update 更新可用软件列表 sudo apt upgrade 更新已安装的包 常用文件指令命令 对应英文 作用ls list 查看当前文件夹的内容pwd print work directory 查看当前所在文件夹cd 【目录名】 change directory 切换文件夹touch【文件名】 touch 如果文件不存在，新建文件mkdir【目录名】 make directory 创建目录rm 【文件名】 remove 删除指定文件clear clear 清屏 vim 文本文件 修改文本内容 esc 修改输入方式 :wq 保存并退出 :q! 强制退出删除目录 rm -r 目录名 rm -i 文件或目录 rm -f 强制删除 –help 和 man 显示…..命令的帮助信息例：touch –help 或者 man touch使用man时的操作操作键 功能空格键 显示手册页的下一屏Enter 一次滚动手册页的一行b 回滚一屏f 前滚一屏q 退出/word 搜索word字符串 以.开头的文件为隐藏文件，需要用-a参数才能显示.代表当前目录..代表上一级目录 快捷键ctr + f - 前进一个字符ctr + b - 后退一个字符ctr + a - 回到行首ctr + e - 回到行尾ctr + w - 向左删除一个单词ctr + u - 向左删除全部ctr + k - 向右删除全部ctr + y - 粘贴上次删除的内容ctr + l - 清屏 ls的通配符12345* 代表任意个字符？ 代表一个字符 [] 表示匹配字符组中的任意一个[abc] 表示匹配a、b、c中的任意一个[a-f] 表示匹配a到f范围内的任意一个字符 cd命令常用参数（更改当前工作目录）cd ~ 或cd 切换当前用户的主目录（/home/用户目录）cd. 保持当前目录不变cd.. 切换到上级目录cd - 可以在最近两次工作目录之间来回切换 mkdir -p 可以递归创建目录 如a/b/c/d 命令 对应英文 作用tree[目录名] tree 以树状图列出文件目录结构cp 源文件 目录文件 copy 复制文件或目录mv 源文件 目标文件 move 移动文件或者目录/文件 或者目录重命名 -I 在执行cp或mv有提示作用 cat 文件名 concatenate 查看文件内容、创建文件、合并、追加文件内容等功能more 文件名 more 分屏显示文件内容grep 搜索文本文件文件名 grep 搜索文本文件内容 cat 适合查看文件内容较少的文件 more 适合查看文件内容较多的文件grep -n 显示匹配行及行号 -v显示不包括匹配文本的所有行 -i忽略大小写 echo 重定向 管道 |一个命令的输出 可以通过管道 作为 另一个命令的输入 例： ls -lh | more 高级命令shutdown 关机/重新启动 -r 重新启动shutdown -c 取消关机shutdown -r now 立刻重启 Ctrl c 可以中断 终端命令 命令 对应英文 作用ifconfig configure a network interface 查看/配置计算机当前网卡信息ping ip 地址 ping 检测目标ip地址的连接是否正常 ssh 用户名@ip secure shell 关机/重新启动scp 用户名@ip:文件名或路径​ 用户名@ip:文件名或路径 secure copy 远程复制文件 网络管理常见服务器端口SSH 服务器 22Web 服务器 80HTTPS 443FTP 服务器 21 ifconfig 查看网卡状态 netstat -natp - 查看网络连接状态netstat -natp|grep 端口号 - 查看指定端口的网络连接状态 ping 地址ping -i 时间 地址ping -c 次数 地址 telnet ip地址 端口 - 查看远程主机网络连接状况 dig 地址 - 查看DNSwget 地址 - 下载 scp -P port 01.py user@remote:Desktop/01.py​ 端口 原文件 远程复制的文件 SSH 高级 免密码登录 配置公匙 ssh-keygen 即可生成SSH 钥匙，回车即可 上传公匙到服务器 ssh-copy-id -p port user@remote,可以让服务器记住公匙 权限管理chmod可以修改文件或目录的权限chmod +/- rwx 文件名或目录名 目录 拥有者权限 组权限 其他用户权限文件权限示例 - r w - r w - r - -目录权限示例 d r w x r w x r - x 组管理 终端命令 命令 作用 groupadd 组名 添加组 useradd -G 分组列表 添加组到指定目录 groupdel 组名 删除组 cat/etc/group 确认组信息 chgrp 组名 文件/目录名 递归修改文件/目录所属组 用户管理 终端命令 命令 作用 说明 useradd -m -g 组 新建用户名 添加新用户 -m 自动建立用户目录 -g 指定用户所在的组，否则会建立一个同名的组 passwd 用户名 设置用户密码 如果是普通用户，可直接使用passwd修改自己的账户密码 userdel -r 用户名 删除用户 -r 选项会自动删除用户家目录 cat/ect/passwd | grep 用户名 确认用户信息 新建用户后，用户信息会保存在/etc/passwd 文件中 查看用户信息 命令 作用 id [用户名] 查看用户UID和GID信息 who 查看当前所用登录的用户列表 whoami 查看当前登录用户的账户名 passwd文件/etc/passwd 文件存放的是用户信息，由6个分号组成的7个信息1.用户名2.密码（x：表示加密的密码）3.UID （用户标识）4.GID （组标识）5.用户全名或本地账号6.家目录7.登录使用的 Shell，就是登录之后使用的终端命令，ubantu默认是dash usermod 修改用户登录 shellusermod -s /bin/bash 用户名 /etc/passwd 是用于保护用户信息的文件/usr/bin/passwd 是用于修改用户的密码 which 命令可以查看执行命令所在的位置which ls 输出–&gt; /bin/lswhich useradd 输出–&gt; /usr/sbin/useradd 命令 作用 说明su -用户名 切换用户，并且切换目录 - 可以切换到用户家目录，否则保持位置不变exit 退出当前用户 su 不接用户名，可以切换到root，但不推荐使用，因为不安全 chown 修改拥有者chgrp 修改组chmod 修改权限 递归修改文件权限chmod -R 755 文件名|目录名 拥有者 组 其他 r w x r w x r w x 4 2 1 4 2 1 4 2 1 0:表示没有权限 4 2 1 7 rwx4 2 0 6 rw-4 0 1 5 r-x4 0 0 4 r–0 2 1 3 -wx0 2 0 2 -w-0 0 1 1 –x0 0 0 0 — 系统信息相关命令时间和日期date 查看系统时间cal calendar查看日历，-y选项可以查看一年的日历 df -h disk free显示磁盘的剩余空间du -h[目录名] disk usage显示目录下的文件大小 进程信息ps aux process status 查看进程的详细状况top 动态显示运行中的进程并且排序kill [-9]进程代号 终止指定代号的进程，-9表示强行终止 a 显示终端上的所有进程，包括其他用户的进程u 显示进程的详细状态x 显示没有控制终端的进程 find [路径] -name “.py” 查找指定路径的扩展名是.py的文件，包括子目录 ln -s 被链接的源文件链接文件 建立文件的软连接，类似window的快捷方式 ———链接文件的路径要使用绝对路径 打包和解压tar 打包/解包tar -cvf 打包文件.tar 被打包的文件/路径…tar -xvf 解包文件.tar c 生成档案文件，创建打包文件x 解开档案文件v 列出归档解档的详细过程，显示进度f 制定档案文件名称，f后面一定是.tar文件，所以必须放选项最后压缩文件tar -zcvf 打包文件.tar.gz 被压缩的文件/路径…解压缩文件tar -zxvf 解包文件.tar.gz解压缩到指定路径tar -zxvf 解包文件.tar.gz -C目标路径 bzip2压缩文件tar -jcvf 打包文件.tar.bz2 被压缩的文件/路径…解压文件tar -jxvf 解包文件.tar.bz2]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>命令</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python基础语法]]></title>
    <url>%2F2018%2F12%2F22%2Fpython%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%2F</url>
    <content type="text"><![CDATA[10 11Python是一种解释型、面向对象、动态数据类型的高级程序设计语言 原码、反码、补码原码：规定了字节数，写明了符号位，就得到数据的原码反码：正数的反码是其原码，负数的反码是其原码的符号位不动，其他位取反 编译型语言–&gt;编译器–&gt;最终可执行文件 操作系统（windows/Linux/Mac）–&gt;CPU解释型语言–&gt;解释器（逐行解释每一句源代码） IDE ：继承开发环境 Linux下重置pycharm1、关闭正在运行的pycharm2、rm -r ~/.pycharm2018.23、重启pycharm 注释：1# 内容（#后应添加一个空格，以保持代码整齐） 关于代码规范 http://www.python.org/dev/peps/pep-0008/ 谷歌对应中文文档： http://zh-google-styleguide.readthedocs.io/en/latest/google-python-styleguide/python_style_rules/ 算术运算符// ：取整数 例： 9 // 2 ——&gt;4% ：取余数 例： 9 % 2 ——&gt;1 ：幂（次方）例： 2 3 —-&gt;8变量的类型数字型 整数型 int 浮点型 float 布尔型 bool 复数型 complex ：主要用于科学计算非数字型 字符串 列表 元祖 字典数据反转参考（ https://blog.csdn.net/weixin_41829272/article/details/80851720 ） 10 12格式化字符 含义%s 字符串%d 有符号十进制整数，%06d 表示输出的整数显示位数，不足的地方用0补全%f 浮点数，%.02f 表示小数点后显示两位%% 输出% 代码缩进为一个tab键，或者4个空格 ———建议使用空格Ctrl 加 / 表示快速注释 逻辑运算符and 与or 或者not 非 10 13随机数import random 导入工具包random.randint() 随机整数 程序开发的三大流程-顺序：从上到下，按顺序执行代码-分支：根据条件判断，决定执行代码的分支-循环：让特定代码重复执行break 和 continuebreak：某一条件满足时，退出循环，不在执行后续重复的代码continue ：某一条件满足时，不执行后续重复的代码 print 自动换行问题print(“内容” end = “”) 取消自动换行 10 14函数具有独立功能的代码块 在需要的时候调用语法： def 函数名(): 函数封装的代码 …….函数的调用： 函数名（）函数文档注释：函数内使用””” 内容 “”” 在调用函数处使用Ctrl +q 查看 形参和实参形参：定义函数时，小括号里的参数，是用来接收参数的，在函数内部作为 变量使用实参：调用函数时，小括号里的参数，是用来把数据传递到 函数内部 使用的 函数的返回值return 表示返回，后续的代码都不会执行 高级变量类型列表元祖字典字符串 列表：在其他语言中通常叫 数组 列表用[]定义，数据之间使用 , 分隔 索引从0开始 语法：例 names = [“张三”,”李四”]列表常用操作方法增加 列表.insert(索引，数据) 在指定位置插入数据 列表.append(数据) 在末尾追加数据 列表.extend(列表2) 将列表2 的数据追加到列表修改 列表[索引] = 数据 修改指定索引的数据删除 del 列表[索引] 删除索引的数据 列表.remove(数据) 删除第一个出现的指定数据 列表.pop 删除末尾数据 列表.pop(索引) 删除指定索引数据 列表.clear 清空列表统计 len(列表) 列表长度 列表.count(数据) 统计在列表中出现的次数排序 列表.sort() 升序排序 列表.sort(reverse = True) 降序排序 列表.reverse() 逆序、反转循环遍历： 从头到尾依次从列表中获取数据 在循环内部针对每一个元素，执行相同的操作 元组： 由多个元素组成的序列 与列表相似，不同之处 元组元素不能修改元组用()定义 10 15字典：字典用{}定义 字典使用键值对存储数据，键值对之间使用 , 分隔 键 key 是索引（必须是不可变类型的变量） 值 value 是数据 （可以是任意类型） 键和值之间使用 : 分隔 键必须是唯一的 值可以取任何数据类型，但 键只能使用字符串、数字、元组 字符串常用方法：查找与替换 变量名.startswith () 以…开头 .endswith () 以…结束 .find () 指定查找内容 .replace () 替换对齐 .center() 居中对齐 .ljust() 左对齐 .rjust() 右对齐去掉空白字符 .strip() 去除空白字符拆分和连接 .split() 拆分 返回一个列表类型 .join() 连接 返回一个字符串类型 字符串的切片 切片 使用索引值来限定范围，从一个大的字符串中切出小的字符串 语法： 字符串[开始索引 : 结束索引：步长]index ：如果指定的字符串不存在，会报错find ：如果指定的字符串不存在，会返回-1 10 16公共方法python内置函数len() 计算容器中元素的个数del() 删除变量max() 返回容器中元素的最大值 如果是字典只对key比较min() 返回容器中元素的最小值 如果是字典只对key比较**注意：字典没有大小比较成员运算符： in 和 not in完整的for循环语法： for 变量 in 集合: 循环体代码 else: 没有通过break退出循环，循环执行后，会执行的代码 pycharm中TODO注释在 # 后跟上 TODO，用于标记需要去做的工作1#！ ：叫做Shebang 或者 Sha-bang 指明 执行这个脚本文件的解释程序 10 17 变量高级1.变量引用2.可变类型（列表、字典）和不可变类型3.局部变量和全局变量 局部变量：在函数内部定义，只能在函数内部使用函数执行后，函数内部的局部变量，会被系统回收 不同函数，可以定义相同名字的局部变量，互不影响 全局变量：在函数外部定义的变量，所有函数内部都能使用这个变量 在函数内部，可以通过全局变量的引用获取对应的数据 但是，不允许直接修改全局变量的引用（使用赋值语句修改全局变量的值） 在函数内部可以使用 global 关键字修改全局变量 语法： num = 10 def demo(): global num #声明num为全局变量 num = 99 #修改 注意：在开发时，应该把 所有的全局变量 定义在所有函数的上方 交换两个数字a = 6b = 100解法一： 使用临时变量 c = b b = a a = c 解法二： 不使用临时变量 a = a + b b = a - b a = a - b 解法三：Python专有，使用元组 a,b = b,a (等号右边是一个元组，只是把小括号省略了) 函数的参数 符号 += ：在Python中，列表变量调用 += 本质上是在执行列表变量的 extend 方法，不会修改变量的引用2.缺省参数：可以给某个参数 指定一个默认值，具有默认值的参数叫做 缺省参数注意：必须保证所有带有默认值的缺省参数在参数列表的末尾 再调用函数时，如果有多个缺省参数，需要指定参数名（明确参数的对应关系） 3.多值参数：需要 一个函数能够处理的参数个数是不确定的时候，可以使用多值参数Python中的两种多值参数 1.参数名前增加一个 * 可以接收元组 2.参数名前增加两个 * 可以接受字典 一般在给多值参数命名时，习惯以下两个名字 - *args ：存放元组参数，前面一个 * - **kwargs ：存放字典参数，前面连个** 说明：*args 是arguments的缩写，有变量意义 kw 是keyword 的缩写， kwargs 可以记忆 键值对参数 拆包：传递参数时 * 表示元组 ** 表示字典 函数的递归函数自己调用自己 特点： 函数内部可以调用自己也可以调用其他函数 代码特点：函数内部的代码是相同的，只是针对参数不同，处理的结果不同 当参数满足一个条件时，函数不在执行（这个非常重要，为递归的出口，否则进入死循环） 10 18控制台改变颜色格式：print( ‘ \033[显示方式;前景色;背景色m ‘ ) 说明： 前景色 背景色 颜色 1234567830 40 黑色31 41 红色32 42 绿色33 43 黃色34 44 蓝色35 45 紫红色36 46 青蓝色37 47 白色 显示方式 意义 1234560 终端默认设置1 高亮显示4 使用下划线5 闪烁7 反白显示8 不可见 10 20面向对象❶封装 1.类和对象： 类：是一个模板，负责创建对象 对象：由类创造出来的一个具体存在 2.类的三要素 类名：满足大驼峰命名法（每个单词首字母大写，单词与单词之间没有下划线） 属性：对对象的特征描述 方法：对象的行为 3.面向对象基础语法： dir内置函数：dir传入标识符/数据，可以查看内置方法/属性 dir( 标识符/数据 ) * 由哪一个对象调用的方法，方法内的 self 就是哪一个对象的引用 –语法：dir(类名) 在类封装的方法内部，self 就表示 当前地哦啊用方法的对象自己 一个对象的 属性 可以是 另一个 类创建的对象 参考（tj_09_oop案例2.py） 4.身份运算符 比较两个对象的内存地址是否一致 —是否是对同一个对象的引用 x is y 类似 id(x) == id (y) x not is y 类似 id(x) != id(y) 5.私有属性和私有方法（不希望公开的） 定义方式：在 属性名或者方法名前增加两个 下划线 如果非要访问： _类名名称❷继承（实现代码的重用） 语法： class 子类（父类）： pass 1.单继承 子类拥有父类的所有方法和属性 2.多继承 子类拥有多个父类，并且具有所有父类的属性和方法 MRO– 方法搜索顺序：内置属性 mro__可以查看方法的搜索顺序—-print(类名，mro) 10 21❸多态（不同的子类对象调用相同的父类方法，产生不同的执行结果） 多态可以增加代码的灵活度 以子类和重写父类的方法为前提 术语—-实例 创建出来的对象叫做类的实例 创建对象的动作叫做实例化 对象的属性叫做实例属性 对象调用的方法叫做实例方法类方法（方法内部字需要访问类属性） 语法： @classmethod def 类方法名(cls): pass 静态方法(方法内部，不需要访问实例属性和类属性，调用时不需要实例化） 语法： @staticmethod def 静态方法名(): pass 单例 单例设计模式：目的（让创建的对象，在系统中只有唯一的一个实例，每一次执行 类名() 返回的对象，内存地址是相同的）1__new__ 方法：由object 基类提供的内置方法 作用： 在内存中为对象分配空间,返回对象的引用捕获异常语法： try: 可能出现异常的代码 except: 出现异常执行的代码 捕获未知错误 语法： except Exception as result: print(&quot;未知错误 %s&quot; %result) 捕获异常 完整语法 ： try: 可能出现异常的代码 except: 出现异常执行的代码 except: 出现异常执行的代码 … except Exception as result: print(“未知错误 %s” %result) else: 没有异常才会执行的代码 finally： 无论是否异常，都会执行的代 10 22模块 模块的别名 语法： import 模块名 as 别名（大驼峰命名） form...import （部分工具导入，导入之后调用不需要使用模块名可以直接使用） form 模块名 import 工具名 注意事项：如果两个模块，存在同名的函数，那么后倒入模块的函数，会覆盖掉先导入的函数 form...import * (导入所有模块工具） __file__可以查看模块的完整路径 （ print(模块名 . __file__) ） __name__内置属性：测试模块的代码只在测试情况下运行，而在被导入时不会被执行 包 包含多个模块的特殊目录 目录下有一个特殊的文件 init.py 包名的命名方式和变量命名一致 文件操作（1个函数 3个方法） open 打开文件，并且返回文件操作对象 read 将文件内容读取到内存 write 将指定内容写入文件 close 关闭文件 打开文件演练： 1.打开（文件名需要注意大小写） file = open(“文件名”) 2.读取 text = file.read() print(text) 3.关闭 file.close()eval 函数 ：将字符串当成有效的表达式来求值并返回计算结果 url统一资源定位符URL基本格式 = 协议://主机地址/路径 HTTP /HTTPs TCP:可靠传输，传输时建立会话UDP:不可靠传输，不会建立会话 10 23进程：正在运行的程序、独立 线程：一个进程想要执行任务，必须要有线程（每1个进程至少要有1条线程） 进程的所有任务都是在线程中执行的线程的串行1个线程中的任务是串行的 多线程：1个进程可以开启多条线程，每1条线程可以并行（同时）执行不同的任务 原理：同一时间，cpu只能处理一条线程，只有1条线程在工作 多个线程之间来回调度（切换]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>自学记录</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[vim编辑器之神]]></title>
    <url>%2F2018%2F12%2F22%2Fvim%E7%BC%96%E8%BE%91%E5%99%A8%E4%B9%8B%E7%A5%9E%2F</url>
    <content type="text"><![CDATA[vim编辑器之神配置vimrc配置在shell中可以通过 vim ~/.vimrc 或者 vim /etc/vimrc 打开vimrc文件对vim进行配置。在这个文件中可以进行很多和vim相关的配置，常用的如下（如果对其他配置感兴趣的可以自己百度）： 常用操作1.模式切换我们可以将vim分为命令模式、编辑模式和末行模式三种命令模式：进入vim的时候vim是处于命令模式状态下的，这个时候输入内容不会出现在编辑区 (最末什么都没有) 末行模式：在命令模式下输入冒号，让vim进入末行模式。在末行模式的冒号后面可以输入相关的一些指令进行相关操作 (最后有一个冒号) 编辑模式：在命令模式下按’i’进入编辑模式。在编辑模式下可以对文件内容进行编辑 (最后 –INSERT– 或者 –插入–) ####2.保存和退出在末行模式下输入相应的指令可以对编辑区的内容进行保存和退出vim界面w – 只保存(类似快捷键ctr+s)q – 退出（在编辑区的内容全部都保存的情况下才有效）wq – 保存并退出q! – 强制退出（不保存修改信息） ####3.光标操作以下光标操作都是在命令模式下输入的^(shift+6) – 移动到行首$(shift+4) – 移动到行尾G(shift+g) – 移动到文件末尾行号G – 移动到指定行,例如:30G, 让光标直接跳转到行号是30的那一行gg – 移动到文件开头 ####4.文本操作以下操作不带冒号的是在命令模式下输入，前面有冒号代码后面的内容是在末行模式下输入dd – 删除光标所在的行数字dd – 从光标所在行开始往后面开始删，删除指定数量行内容:%d – 删除所有 yy – 复制光标所在的行数字yy – 从光标所在行开始复制指定行数的内容p – 将复制的内容粘贴到光标所在的位置u – 撤销ctr+r – 反撤销 :%!sort – 对内容排序 :/查找对象[/gice] – 搜索匹配正则表达式的内容，按回车回到命令模式后按n往前查找，按N往后查找 *:1,$s/被替换对象/替换内容[/gice]* – 将正则表达式匹配到的内容替换成指定内容 - g: 全局匹配 - i: 忽略大小写 - c: 替换时需要提示 - e: 忽略错误]]></content>
      <categories>
        <category>vim</category>
      </categories>
      <tags>
        <tag>配置vimrc配置</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Nginx服务器]]></title>
    <url>%2F2018%2F12%2F22%2FNginx%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%89%E8%A3%85%2F</url>
    <content type="text"><![CDATA[Nginx服务器1.阿里云添加80端口阿里云上默认只有一个22端口用来做远程登录，如果希望在阿里云上安装支持http请求的nginx服务器，需要给阿里云添加80端口 2. 安装nginxa) 添加nginx存储库 1yum install epel-release b) 安装nginx 1yum install nginx c) 运行nginxNginx不会自行启动。要运行Nginx 1systemctl start nginx nginx的运行命令: 12systemctl status nginx 查看nginx的状态 systemctl start/stop/enable/disable nginx 启动/关闭/设置开机启动/禁止开机启动 d) 系统启动时启动Nginx 1systemctl enable nginx e）如果您正在运行防火墙，请运行以下命令以允许HTTP和HTTPS通信： 12345sudo firewall-cmd --permanent --zone=public --add-service=http sudo firewall-cmd --permanent --zone=public --add-service=httpssudo firewall-cmd --reload 3.nginx目录共享配置a) 在contOS目录中确定一个需要共享的文件夹，例如： /home/yutingb) 打开 etc/nginx/nginx.conf 文件，设置server 1234567#共享设置 - 在浏览器中输入服务器ip地址，会展示共享目录的文件列表root /home/yuting;location / &#123; autoindex on; autoindex_exact_size on; autoindex_localtime on;&#125; 除了可以共享文件，还可以自定义页面 12345#自定义服务器页面location / &#123; root /home/yuting; index index.html index.htm;&#125; 注意： 如果出现权限问题，可以修改目录的权限 ssh密钥认证1.在主机和从机上执行：ssh-keygen 2.在从机上执行: scp id_rsa.pub root@主机地址:~/.ssh/master.pub(上面这条指令是将从机上的 id_rsa.pub文件拷贝传递给到主机的.ssh文件夹下，并且命名为’master.pub’) 3.在主机中的.ssh文件夹中创建authorized_keys文件： touch authorized_keys 4.修改文件authorized_keys的权限: chmod 600 authorized_keys 5.将master.pub放进authorized_keys文件中: cat master.pub &gt;&gt; authorized_keys 6.在操作主机的时候，需要主机能够自己免密访问自己就将自己的公钥放在自己的authorized_keys文件中]]></content>
      <categories>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[git常用指令]]></title>
    <url>%2F2018%2F12%2F22%2Fgit%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4%2F</url>
    <content type="text"><![CDATA[git常用指令1.基本指令git init &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; —— 新建git仓库git add 文件/文件夹 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; —— 将文件添加到缓存区中git add -A &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; — 添加所有内容到缓存区中git stutas &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;——— 查看git状态git commit -m ‘提交信息’ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;—— 将缓存区中的内容全部提交到git本地仓库中 git log &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;——- 查看提交日志 git reset - - hard HEAD &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;—— 让工作目录中的内容和仓库中的内容保持一致git reset --hard HEAD^ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;—— 回到上一个版本git reset - - hard 版本号 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;—— 回到指定的版本git checkout - - 文件名 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; —— 从暂存区中恢复工作目录中的内容(让工作区中的指定文件，回到上次提交的时候的状态) git clone &lt;url&gt; - 将服务器上的项目(仓库)克隆 (使用https地址需要输入密码，使用ssh地址需要添加公钥) git remote add origin 地址 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;—– 关联远程仓库(只需要关联一次) git push [-u] origin master &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;—– 提交(-u在第一次提交分之的时候才用) 2.分之管理创建仓库会默认给我们创建一个master分之,这个分之一般作为提交和发布分之;开发一般会自己创建一个develop分之，用来开发和测试;多人协作的时候还可能根据不同的人或者(不同的功能)创建不同的分之，用来独立开发 常见分之： master(主要是合并develop), develop(主要合并下面的其他分支), 功能/人员分之(开发) git branch [-a] &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - 查看分之git branch 分之名 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;- 创建分之git checkout 分支名 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;- 切换分之git checkout -b 分之名 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - 切换并创建新的分之git diff 分之1 分之2 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;- 查看两个分之之间的差异git merge 分之名 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;- 让当前分之和指定分之进行合并 注意: 切换分之、push、pull，这些操作前要保证工作区是clean 怎么避免冲突： 不要发生多个分之对同一个文件在同一个版本下进行修改(和同伴确认和商量)]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git指令</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ssh免密登陆及登陆失败后的解决办法]]></title>
    <url>%2F2018%2F12%2F21%2Fssh%E5%85%8D%E5%AF%86%E7%99%BB%E9%99%86%2F</url>
    <content type="text"><![CDATA[这篇文章主要给大家介绍了关于centos配置ssh免密码登录以及登录后仍要输入密码的解决方法,需要的朋友可以参考下 首先，我们需要明白为什么要设置SSH免密码登录，其原因是我们在开启服务器的时候需要多次输入yes和root密码，这是我们所不能忍受的，我们迫切需要实现免登录的功能 第一步：在本机中创建秘钥1.执行命令： ssh-keygen -t rsa -C “xx@qq.com“(随便编个字符串，一般用邮箱）注意事项2、之后一路回车就行啦；会在～（home）目录下中产生.ssh（隐藏）文件夹；3、里面有两个文件id_rsa(私钥)、id_rsa.pub(公钥)文件注意事项：①在liunx环境下，要想复制公钥或是私钥，不要使用vim等编辑器打开文件来复制粘贴；因为它会产生不必要的回车。②应该使用cat把内容打印到终端上再来复制粘贴； 第二步：用 ssh-copy-id 把公钥复制到远程主机上ssh-copy-id zhangming@192.168.161.132把秘钥拷贝到远程服务器 用这种方式拷贝使用的端口是Linux默认的22，如果你想指定端口，可以使用： ssh-copy-id -i /用户名/.ssh/id_rsa.pub ‘-p 端口号 用户名@106.75.52.44’ ssh-copy-id -i /root/.ssh/id_rsa.pub ‘-p 22222 root@106.75.52.44‘这里可能需要等一段时间，反正我是等了挺久的时间，然后显示要你输入密码： zhangming@106.75.52.44‘s password:输入完密码后，显示：Now try logging into the machine, with “ssh ‘-p 22222 root@106.75.52.44‘“, and check in: .ssh/authorized_keysto make sure we haven’t added extra keys that you weren’t expecting.表示成功了！ 第三步：远程登入 [zhangming@localhost ~]$ ssh zhangming@192.168.161.134Last login: Mon Oct 10 14:18:54 2016 from 192.168.161.135ssh zhangming@123.59.44.56 -p 22222 注意 遇到的大坑：配置ssh免密码登录后，仍提示输入密码 解决方法：首先我们就要去查看系统的日志文件cat /var/log/secure 发现问题的所在：Authentication refused: bad ownership or modes for file从字面上可以看出是目录的属主和权限配置不当，查找资料得知：SSH不希望home目录和~/.ssh目录对组有写权限，通过下面几条命令改下 g-w /home/zhangmingchmod 700 /home/zhangming/.sshchmod 600 /home/zhangming/.ssh/authorized_keys然后我们再去登录，就能不用密码进入了。12]]></content>
      <categories>
        <category>服务器</category>
      </categories>
      <tags>
        <tag>ssh</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2018%2F12%2F19%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
      <categories>
        <category>Diary</category>
      </categories>
      <tags>
        <tag>Hello</tag>
        <tag>World</tag>
      </tags>
  </entry>
</search>
