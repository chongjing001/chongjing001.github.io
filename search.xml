<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>Linux常用终端命令</title>
      <link href="/2018/12/22/Linux/"/>
      <url>/2018/12/22/Linux/</url>
      
        <content type="html"><![CDATA[<h3 id="基本指令"><a href="#基本指令" class="headerlink" title="基本指令"></a>基本指令</h3><p><strong>下面四个为ubantu安装更新命令</strong><br>sudo  apt  install 软件名         安装软件</p><p>sudo  apt  remove  软件名     卸载软件</p><p>sudo  apt   update                 更新可用软件列表</p><p>sudo  apt   upgrade                更新已安装的包</p><h4 id="常用文件指令"><a href="#常用文件指令" class="headerlink" title="常用文件指令"></a>常用文件指令</h4><p>命令                               对应英文                           作用<br>ls                                    list                                    查看当前文件夹的内容<br>pwd                                print work directory        查看当前所在文件夹<br>cd     【目录名】             change directory              切换文件夹<br>touch【文件名】             touch                                如果文件不存在，新建文件<br>mkdir【目录名】             make directory                 创建目录<br>rm     【文件名】             remove                             删除指定文件<br>clear                               clear                                  清屏</p><p>vim  文本文件                                                      修改文本内容<br>                                                                           esc 修改输入方式<br>                                                                           :wq  保存并退出<br>                                                                           :q!    强制退出<br>删除目录  rm -r 目录名<br>               rm  -i 文件或目录<br>               rm -f 强制删除</p><p>–help   和   man        显示…..命令的帮助信息<br>例：touch –help        或者  man touch<br>使用man时的操作<br>操作键                   功能<br>空格键                   显示手册页的下一屏<br>Enter                     一次滚动手册页的一行<br>b                           回滚一屏<br>f                             前滚一屏<br>q                            退出<br>/word                    搜索word字符串</p><p>以.开头的文件为隐藏文件，需要用-a参数才能显示<br>.代表当前目录<br>..代表上一级目录</p><h4 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h4><p>ctr + f         - 前进一个字符<br>ctr + b        - 后退一个字符<br>ctr + a        - 回到行首<br>ctr + e         - 回到行尾<br>ctr + w        - 向左删除一个单词<br>ctr + u        - 向左删除全部<br>ctr + k        - 向右删除全部<br>ctr + y        - 粘贴上次删除的内容<br>ctr + l        - 清屏</p><h4 id="ls的通配符"><a href="#ls的通配符" class="headerlink" title="ls的通配符"></a>ls的通配符</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">*          代表任意个字符</span><br><span class="line">？        代表一个字符  </span><br><span class="line">[]         表示匹配字符组中的任意一个</span><br><span class="line">[abc]    表示匹配a、b、c中的任意一个</span><br><span class="line">[a-f]     表示匹配a到f范围内的任意一个字符</span><br></pre></td></tr></table></figure><p>cd命令常用参数<br>（更改当前工作目录）<br>cd ~ 或cd 切换当前用户的主目录（/home/用户目录）<br>cd.    保持当前目录不变<br>cd..   切换到上级目录<br>cd -  可以在最近两次工作目录之间来回切换</p><p>mkdir -p  可以递归创建目录  如a/b/c/d</p><p>命令                               对应英文                           作用<br>tree[目录名]                   tree                                  以树状图列出文件目录结构<br>cp 源文件 目录文件         copy                                复制文件或目录<br>mv 源文件 目标文件        move                               移动文件或者目录/文件  或者目录重命名</p><p>-I  在执行cp或mv有提示作用</p><p>cat 文件名                      concatenate                     查看文件内容、创建文件、合并、追加文件内容等功能<br>more 文件名                  more                                分屏显示文件内容<br>grep 搜索文本文件文件名 grep                               搜索文本文件内容</p><p> cat      适合查看文件内容较少的文件<br> more  适合查看文件内容较多的文件<br>grep -n 显示匹配行及行号    -v显示不包括匹配文本的所有行    -i忽略大小写       </p><p>echo 重定向</p><p>管道 |<br>一个命令的输出  可以通过管道 作为 另一个命令的输入 例： ls -lh | more</p><h3 id="高级命令"><a href="#高级命令" class="headerlink" title="高级命令"></a>高级命令</h3><p>shutdown  关机/重新启动</p><p>-r 重新启动<br>shutdown -c  取消关机<br>shutdown -r now  立刻重启</p><p>Ctrl c  可以中断 终端命令</p><p>命令                                                  对应英文                                       作用<br>ifconfig                                        configure a network interface      查看/配置计算机当前网卡信息<br>ping ip 地址                                  ping                                              检测目标ip地址的连接是否正常</p><p>ssh 用户名@ip                               secure shell                                   关机/重新启动<br>scp 用户名@ip:文件名或路径<br>​       用户名@ip:文件名或路径             secure  copy                                远程复制文件</p><h4 id="网络管理"><a href="#网络管理" class="headerlink" title="网络管理"></a>网络管理</h4><p>常见服务器端口<br>SSH 服务器      22<br>Web 服务器     80<br>HTTPS             443<br>FTP 服务器       21</p><p>ifconfig     查看网卡状态</p><p>netstat   -natp                    - 查看网络连接状态<br>netstat   -natp|grep  端口号            - 查看指定端口的网络连接状态    </p><p>ping  地址<br>ping  -i   时间    地址<br>ping  -c  次数    地址</p><p>telnet  ip地址    端口         - 查看远程主机网络连接状况</p><p>dig 地址            - 查看DNS<br>wget  地址            - 下载</p><p>scp -P port     01.py     user@remote:Desktop/01.py<br>​            端口    原文件     远程复制的文件</p><p><strong>SSH 高级</strong></p><ul><li><p>免密码登录</p><p> 配置公匙<br> ssh-keygen 即可生成SSH 钥匙，回车即可<br> 上传公匙到服务器</p><p>  ssh-copy-id -p port user@remote,可以让服务器记住公匙</p><h4 id="权限管理"><a href="#权限管理" class="headerlink" title="权限管理"></a>权限管理</h4><p>chmod<br>可以修改文件或目录的权限<br>chmod  +/- rwx 文件名或目录名</p><p> 目录             拥有者权限             组权限               其他用户权限<br>文件权限示例          -  r   w   -           r   w   -               r   -      -<br>目录权限示例         d r   w    x         r   w   x               r   -      x</p></li></ul><p>组管理  终端命令<br>    命令                                    作用<br>  groupadd 组名                     添加组<br>  useradd -G 分组列表          添加组到指定目录<br>  groupdel  组名                      删除组<br>  cat/etc/group                       确认组信息<br>  chgrp 组名  文件/目录名        递归修改文件/目录所属组</p><p>用户管理  终端命令<br>   命令                                            作用                  说明<br>  useradd -m -g 组 新建用户名     添加新用户        -m 自动建立用户目录<br>                                                                             -g 指定用户所在的组，否则会建立一个同名的组<br>  passwd  用户名                          设置用户密码     如果是普通用户，可直接使用passwd修改自己的账户密码<br>  userdel -r 用户名                       删除用户             -r 选项会自动删除用户家目录<br>  cat/ect/passwd | grep 用户名    确认用户信息      新建用户后，用户信息会保存在/etc/passwd 文件中</p><p>查看用户信息<br>       命令                         作用<br>   id [用户名]                 查看用户UID和GID信息<br>   who                           查看当前所用登录的用户列表<br>   whoami                     查看当前登录用户的账户名</p><p>passwd文件<br>/etc/passwd 文件存放的是用户信息，由6个分号组成的7个信息<br>1.用户名<br>2.密码（x：表示加密的密码）<br>3.UID （用户标识）<br>4.GID （组标识）<br>5.用户全名或本地账号<br>6.家目录<br>7.登录使用的 Shell，就是登录之后使用的终端命令，ubantu默认是dash</p><p>usermod 修改用户登录 shell<br>usermod -s /bin/bash 用户名</p><p>/etc/passwd 是用于保护用户信息的文件<br>/usr/bin/passwd 是用于修改用户的密码</p><p>which 命令可以查看执行命令所在的位置<br>which ls   输出–&gt;  /bin/ls<br>which useradd  输出–&gt;  /usr/sbin/useradd</p><p>命令             作用                                    说明<br>su -用户名    切换用户，并且切换目录     - 可以切换到用户家目录，否则保持位置不变<br>exit               退出当前用户</p><p>su 不接用户名，可以切换到root，但不推荐使用，因为不安全</p><p>chown         修改拥有者<br>chgrp           修改组<br>chmod        修改权限</p><p>递归修改文件权限<br>chmod -R 755 文件名|目录名</p><pre><code> 拥有者              组                   其他r    w     x        r     w     x        r     w     x4   2       1       4    2      1       4     2     1      </code></pre><p> 0:表示没有权限</p><p>4    2      1               7               rwx<br>4    2      0               6               rw-<br>4    0      1               5               r-x<br>4    0      0               4               r–<br>0    2      1               3               -wx<br>0    2      0               2               -w-<br>0    0      1               1               –x<br>0    0      0               0               —</p><p>系统信息相关命令<br>时间和日期<br>date    查看系统时间<br>cal      calendar查看日历，-y选项可以查看一年的日历</p><p>df -h    disk free显示磁盘的剩余空间<br>du -h[目录名]     disk  usage显示目录下的文件大小</p><p>进程信息<br>ps aux           process status 查看进程的详细状况<br>top                 动态显示运行中的进程并且排序<br>kill [-9]进程代号   终止指定代号的进程，-9表示强行终止</p><p>a  显示终端上的所有进程，包括其他用户的进程<br>u  显示进程的详细状态<br>x  显示没有控制终端的进程</p><p>find [路径] -name “.py” 查找指定路径的扩展名是.py的文件，包括子目录</p><p>ln -s 被链接的源文件链接文件   建立文件的软连接，类似window的快捷方式<br> ———链接文件的路径要使用绝对路径</p><h4 id="打包和解压"><a href="#打包和解压" class="headerlink" title="打包和解压"></a>打包和解压</h4><p>tar  打包/解包<br>tar -cvf 打包文件.tar 被打包的文件/路径…<br>tar -xvf 解包文件.tar</p><p>c  生成档案文件，创建打包文件<br>x  解开档案文件<br>v  列出归档解档的详细过程，显示进度<br>f  制定档案文件名称，f后面一定是.tar文件，所以必须放选项最后<br>压缩文件<br>tar -zcvf  打包文件.tar.gz 被压缩的文件/路径…<br>解压缩文件<br>tar -zxvf 解包文件.tar.gz<br>解压缩到指定路径<br>tar -zxvf 解包文件.tar.gz -C目标路径 </p><p>bzip2<br>压缩文件<br>tar -jcvf  打包文件.tar.bz2 被压缩的文件/路径…<br>解压文件<br>tar -jxvf 解包文件.tar.bz2</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 命令 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>python基础语法</title>
      <link href="/2018/12/22/python%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
      <url>/2018/12/22/python%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h3 id="10-11"><a href="#10-11" class="headerlink" title="10 11"></a><strong>10 11</strong></h3><p>Python是一种解释型、面向对象、动态数据类型的高级程序设计语言</p><p>原码、反码、补码<br>原码：规定了字节数，写明了符号位，就得到数据的原码<br>反码：正数的反码是其原码，负数的反码是其原码的符号位不动，其他位取反</p><p>编译型语言–&gt;编译器–&gt;最终可执行文件<br>                                                                             操作系统（windows/Linux/Mac）–&gt;CPU<br>解释型语言–&gt;解释器（逐行解释每一句源代码）</p><p>IDE ：继承开发环境</p><p>Linux下重置pycharm<br>1、关闭正在运行的pycharm<br>2、rm -r ~/.pycharm2018.2<br>3、重启pycharm</p><p>注释：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># 内容（#后应添加一个空格，以保持代码整齐）</span><br></pre></td></tr></table></figure></p><blockquote><p>  关于代码规范<br>  <a href="http://www.python.org/dev/peps/pep-0008/" target="_blank" rel="noopener">http://www.python.org/dev/peps/pep-0008/</a><br>  谷歌对应中文文档：<br>   <a href="http://zh-google-styleguide.readthedocs.io/en/latest/google-python-styleguide/python_style_rules/" target="_blank" rel="noopener">http://zh-google-styleguide.readthedocs.io/en/latest/google-python-styleguide/python_style_rules/</a></p></blockquote><p>算术运算符<br>// ：取整数  例： 9 // 2  ——&gt;4<br>% ：取余数  例： 9 % 2 ——&gt;1<br><strong> ：幂（次方）例： 2 </strong> 3 —-&gt;8<br>变量的类型<br>数字型<br>     整数型 int<br>     浮点型 float<br>     布尔型 bool<br>     复数型 complex  ：主要用于科学计算<br>非数字型<br>     字符串<br>     列表<br>     元祖<br>     字典<br>数据反转参考（ <a href="https://blog.csdn.net/weixin_41829272/article/details/80851720" target="_blank" rel="noopener">https://blog.csdn.net/weixin_41829272/article/details/80851720</a> ）</p><h3 id="10-12"><a href="#10-12" class="headerlink" title="10 12"></a>10 12</h3><p>格式化字符       含义<br>%s                   字符串<br>%d                  有符号十进制整数，%06d 表示输出的整数显示位数，不足的地方用0补全<br>%f                   浮点数，%.02f 表示小数点后显示两位<br>%%                 输出%</p><p>代码缩进为一个tab键，或者4个空格  ———建议使用空格<br>Ctrl 加 /  表示快速注释</p><p>逻辑运算符<br>and   与<br>or      或者<br>not    非</p><h3 id="10-13"><a href="#10-13" class="headerlink" title="10 13"></a>10 13</h3><p>随机数<br>import  random   导入工具包<br>random.randint() 随机整数</p><p>程序开发的三大流程<br>-顺序：从上到下，按顺序执行代码<br>-分支：根据条件判断，决定执行代码的分支<br>-循环：让特定代码重复执行<br>break 和 continue<br>break：某一条件满足时，退出循环，不在执行后续重复的代码<br>continue ：某一条件满足时，不执行后续重复的代码</p><p>print 自动换行问题<br>print(“内容” end = “”) 取消自动换行</p><h3 id="10-14"><a href="#10-14" class="headerlink" title="10 14"></a>10 14</h3><p>函数<br><strong>具有独立功能的代码块  在需要的时候调用</strong><br>语法：  def  函数名():<br>                   函数封装的代码<br>                   …….<br>函数的调用： 函数名（）<br>函数文档注释：函数内使用”””  内容 “””    在调用函数处使用Ctrl +q 查看</p><ul><li>形参和实参<br>形参：定义函数时，小括号里的参数，是用来接收参数的，在函数内部作为 变量使用<br>实参：调用函数时，小括号里的参数，是用来把数据传递到 函数内部 使用的</li><li>函数的返回值<br>return 表示返回，后续的代码都不会执行</li></ul><p>高级变量类型<br>列表<br>元祖<br>字典<br>字符串</p><p>列表：在其他语言中通常叫 数组<br>          列表用[]定义，数据之间使用 , 分隔<br>          索引从0开始<br>          语法：例  names = [“张三”,”李四”]<br>列表常用操作方法<br>增加         列表.insert(索引，数据)        在指定位置插入数据<br>                列表.append(数据)              在末尾追加数据<br>                列表.extend(列表2)              将列表2 的数据追加到列表<br>修改         列表[索引] = 数据                修改指定索引的数据<br>删除         del 列表[索引]                      删除索引的数据<br>                列表.remove(数据)              删除第一个出现的指定数据<br>                列表.pop                             删除末尾数据<br>                列表.pop(索引)                    删除指定索引数据<br>                列表.clear                            清空列表<br>统计         len(列表)                              列表长度<br>                列表.count(数据)                  统计在列表中出现的次数<br>排序         列表.sort()                            升序排序<br>                列表.sort(reverse = True)    降序排序<br>                列表.reverse()                      逆序、反转<br>循环遍历： 从头到尾依次从列表中获取数据<br>                 在循环内部针对每一个元素，执行相同的操作</p><p>元组： 由多个元素组成的序列   与列表相似，不同之处  元组元素不能修改<br>元组用()定义</p><h3 id="10-15"><a href="#10-15" class="headerlink" title="10 15"></a>10 15</h3><p>字典：字典用{}定义<br>          字典使用键值对存储数据，键值对之间使用 , 分隔<br>              键 key  是索引（必须是不可变类型的变量）<br>              值 value  是数据 （可以是任意类型）<br>              键和值之间使用  : 分隔<br>              键必须是唯一的<br>              值可以取任何数据类型，但 键只能使用字符串、数字、元组</p><p>字符串<br>常用方法：<br>查找与替换          变量名.startswith ()      以…开头<br>                                     .endswith  ()      以…结束<br>                                     .find ()               指定查找内容<br>                                     .replace ()          替换<br>对齐                              .center()             居中对齐<br>                                     .ljust()                左对齐<br>                                     .rjust()                右对齐<br>去掉空白字符                 .strip()                去除空白字符<br>拆分和连接                    .split()                 拆分   返回一个列表类型<br>                                     .join()                 连接   返回一个字符串类型</p><p>字符串的切片<br>      切片 使用索引值来限定范围，从一个大的字符串中切出小的字符串<br> 语法：  字符串[开始索引 : 结束索引：步长]<br>index ：如果指定的字符串不存在，会报错<br>find ：如果指定的字符串不存在，会返回-1</p><h3 id="10-16"><a href="#10-16" class="headerlink" title="10 16"></a>10 16</h3><p>公共方法<br>python内置函数<br>len()                   计算容器中元素的个数<br>del()                   删除变量<br>max()                 返回容器中元素的最大值                 如果是字典只对key比较<br>min()                  返回容器中元素的最小值                 如果是字典只对key比较<br>**注意：字典没有大小比较<br>成员运算符： in   和  not in<br>完整的for循环语法：<br>           for  变量   in  集合:<br>                  循环体代码<br>           else:<br>                  没有通过break退出循环，循环执行后，会执行的代码</p><p>pycharm中TODO注释<br>在 # 后跟上 TODO，用于标记需要去做的工作<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#！ ：叫做Shebang 或者 Sha-bang</span><br></pre></td></tr></table></figure></p><p>指明 执行这个脚本文件的解释程序</p><p>10 17</p><ul><li>变量高级<br>1.变量引用<br>2.可变类型（列表、字典）和不可变类型<br>3.局部变量和全局变量<br>   局部变量：在函数内部定义，只能在函数内部使用<pre><code>函数执行后，函数内部的局部变量，会被系统回收不同函数，可以定义相同名字的局部变量，互不影响</code></pre>   全局变量：在函数外部定义的变量，所有函数内部都能使用这个变量<pre><code>   在函数内部，可以通过全局变量的引用获取对应的数据   但是，不允许直接修改全局变量的引用（使用赋值语句修改全局变量的值）  在函数内部可以使用 global 关键字修改全局变量  语法：   num = 10               def  demo():                     global num  #声明num为全局变量                     num = 99    #修改注意：在开发时，应该把 所有的全局变量 定义在所有函数的上方</code></pre></li></ul><ul><li><p>交换两个数字<br>a = 6<br>b = 100<br>解法一：  使用临时变量</p><pre><code>c = bb = aa = c</code></pre><p>解法二： 不使用临时变量</p><pre><code>a = a + bb = a - ba = a - b</code></pre><p>解法三：Python专有，使用元组</p><pre><code>a,b = b,a   (等号右边是一个元组，只是把小括号省略了)</code></pre></li><li><p>函数的参数</p></li></ul><ol><li>符号 += ：在Python中，列表变量调用 += 本质上是在执行列表变量的 extend 方法，不会修改变量的引用<br>2.缺省参数：可以给某个参数 指定一个默认值，具有默认值的参数叫做 缺省参数<pre><code>注意：必须保证所有带有默认值的缺省参数在参数列表的末尾          再调用函数时，如果有多个缺省参数，需要指定参数名（明确参数的对应关系）</code></pre>3.多值参数：需要 一个函数能够处理的参数个数是不确定的时候，可以使用多值参数<pre><code>Python中的两种多值参数   1.参数名前增加一个 * 可以接收元组   2.参数名前增加两个 * 可以接受字典一般在给多值参数命名时，习惯以下两个名字    -   *args  ：存放元组参数，前面一个 *    -   **kwargs   ：存放字典参数，前面连个** 说明：*args 是arguments的缩写，有变量意义          kw 是keyword 的缩写， kwargs 可以记忆 键值对参数拆包：传递参数时   * 表示元组   ** 表示字典</code></pre></li></ol><ul><li>函数的递归<pre><code>函数自己调用自己特点： 函数内部可以调用自己也可以调用其他函数代码特点：函数内部的代码是相同的，只是针对参数不同，处理的结果不同                 当参数满足一个条件时，函数不在执行（这个非常重要，为递归的出口，否则进入死循环）</code></pre></li></ul><h3 id="10-18"><a href="#10-18" class="headerlink" title="10 18"></a>10 18</h3><p>控制台改变颜色<br>格式：print( ‘ \033[显示方式;前景色;背景色m ‘ )</p><p> 说明：<br> 前景色            背景色           颜色<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">30                40              黑色</span><br><span class="line">31                41              红色</span><br><span class="line">32                42              绿色</span><br><span class="line">33                43              黃色</span><br><span class="line">34                44              蓝色</span><br><span class="line">35                45              紫红色</span><br><span class="line">36                46              青蓝色</span><br><span class="line">37                47              白色</span><br></pre></td></tr></table></figure></p><p>显示方式           意义</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">0                终端默认设置</span><br><span class="line">1                高亮显示</span><br><span class="line">4                使用下划线</span><br><span class="line">5                闪烁</span><br><span class="line">7                反白显示</span><br><span class="line">8                不可见</span><br></pre></td></tr></table></figure><h3 id="10-20"><a href="#10-20" class="headerlink" title="10 20"></a>10 20</h3><p>面向对象<br>❶封装<br>  1.类和对象：</p><pre><code>类：是一个模板，负责创建对象对象：由类创造出来的一个具体存在</code></pre><p>  2.类的三要素<br>                 类名：满足大驼峰命名法（每个单词首字母大写，单词与单词之间没有下划线）<br>                 属性：对对象的特征描述<br>                 方法：对象的行为<br>  3.面向对象基础语法：<br>               dir内置函数：dir传入标识符/数据，可以查看内置方法/属性   dir( 标识符/数据 )<br>      <strong><strong>*</strong></strong>  由哪一个对象调用的方法，方法内的 self 就是哪一个对象的引用 –语法：dir(类名)<br>                      在类封装的方法内部，self 就表示 当前地哦啊用方法的对象自己<br>        一个对象的 属性 可以是 另一个 类创建的对象  参考（tj_09_oop案例2.py）<br>  4.身份运算符<br>       比较两个对象的内存地址是否一致 —是否是对同一个对象的引用<br>       x  is  y    类似 id(x) == id (y)<br>       x  not is y  类似   id(x)  != id(y)<br>  5.私有属性和私有方法（不希望公开的）<br>         定义方式：在 属性名或者方法名前增加两个 下划线<br>          如果非要访问：  _类名<strong>名称<br>❷继承（实现代码的重用）<br>       语法：<br>        class 子类（父类）：<br>               pass<br>  1.单继承<br>      子类拥有父类的所有方法和属性<br>  2.多继承<br>       子类拥有多个父类，并且具有所有父类的属性和方法<br>       MRO– 方法搜索顺序：内置属性 </strong>mro__可以查看方法的搜索顺序—-print(类名，<strong>mro</strong>)</p><h3 id="10-21"><a href="#10-21" class="headerlink" title="10 21"></a>10 21</h3><p>❸多态（不同的子类对象调用相同的父类方法，产生不同的执行结果）</p><pre><code>多态可以增加代码的灵活度以子类和重写父类的方法为前提</code></pre><p>术语—-实例<br>       创建出来的对象叫做类的实例<br>       创建对象的动作叫做实例化<br>       对象的属性叫做实例属性<br>       对象调用的方法叫做实例方法<br>类方法（方法内部字需要访问类属性）<br>    语法：<br>        @classmethod<br>        def  类方法名(cls):<br>                pass</p><p>静态方法(方法内部，不需要访问实例属性和类属性，调用时不需要实例化）<br>     语法：<br>         @staticmethod<br>         def  静态方法名():<br>                pass</p><p>单例<br>   单例设计模式：目的（让创建的对象，在系统中只有唯一的一个实例，每一次执行 类名() 返回的对象，内存地址是相同的）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">__new__ 方法：由object 基类提供的内置方法</span><br></pre></td></tr></table></figure></p><p>作用： 在内存中为对象分配空间,返回对象的引用<br>捕获异常<br>语法：  try:<br>                 可能出现异常的代码<br>            except:<br>                 出现异常执行的代码</p><pre><code>捕获未知错误        语法：      except  Exception  as  result:                                  print(&quot;未知错误 %s&quot;  %result)</code></pre><p>捕获异常 完整语法 ：<br>             try:<br>                 可能出现异常的代码<br>             except:<br>                 出现异常执行的代码<br>             except:<br>                 出现异常执行的代码<br>              …<br>              except  Exception  as  result:<br>                          print(“未知错误 %s”  %result)<br>              else:<br>                     没有异常才会执行的代码<br>              finally：<br>                       无论是否异常，都会执行的代</p><h3 id="10-22"><a href="#10-22" class="headerlink" title="10 22"></a>10 22</h3><p>模块<br>   模块的别名</p><pre><code>    语法：  import   模块名  as   别名（大驼峰命名）form...import （部分工具导入，导入之后调用不需要使用模块名可以直接使用）form  模块名  import  工具名 注意事项：如果两个模块，存在同名的函数，那么后倒入模块的函数，会覆盖掉先导入的函数form...import * (导入所有模块工具） __file__可以查看模块的完整路径 （  print(模块名 . __file__)  ）__name__内置属性：测试模块的代码只在测试情况下运行，而在被导入时不会被执行</code></pre><p>包<br>     包含多个模块的特殊目录<br>     目录下有一个特殊的文件  <strong>init</strong>.py<br>     包名的命名方式和变量命名一致</p><p>文件操作（1个函数 3个方法）<br>           open            打开文件，并且返回文件操作对象<br>           read             将文件内容读取到内存<br>           write            将指定内容写入文件<br>           close            关闭文件<br>        打开文件演练：<br>                  1.打开（文件名需要注意大小写）<br>                  file = open(“文件名”)<br>                  2.读取<br>                  text = file.read()<br>                  print(text)<br>                  3.关闭<br>                  file.close()<br>eval 函数 ：将字符串当成有效的表达式来求值并返回计算结果</p><p>url<br>统一资源定位符<br>URL基本格式  = 协议://主机地址/路径</p><p>HTTP /HTTPs</p><p>TCP:可靠传输，传输时建立会话<br>UDP:不可靠传输，不会建立会话</p><h3 id="10-23"><a href="#10-23" class="headerlink" title="10 23"></a>10 23</h3><p>进程：正在运行的程序、独立</p><p>线程：一个进程想要执行任务，必须要有线程（每1个进程至少要有1条线程）<br>       进程的所有任务都是在线程中执行的<br>线程的串行<br>1个线程中的任务是串行的</p><ul><li>多线程：1个进程可以开启多条线程，每1条线程可以并行（同时）执行不同的任务</li></ul><p>原理：同一时间，cpu只能处理一条线程，只有1条线程在工作</p><pre><code>多个线程之间来回调度（切换</code></pre>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 自学记录 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>vim编辑器之神</title>
      <link href="/2018/12/22/vim%E7%BC%96%E8%BE%91%E5%99%A8%E4%B9%8B%E7%A5%9E/"/>
      <url>/2018/12/22/vim%E7%BC%96%E8%BE%91%E5%99%A8%E4%B9%8B%E7%A5%9E/</url>
      
        <content type="html"><![CDATA[<h1 id="vim编辑器之神"><a href="#vim编辑器之神" class="headerlink" title="vim编辑器之神"></a>vim编辑器之神</h1><h3 id="配置vimrc配置"><a href="#配置vimrc配置" class="headerlink" title="配置vimrc配置"></a>配置vimrc配置</h3><p>在shell中可以通过 <code>vim ~/.vimrc</code> 或者 <code>vim /etc/vimrc</code> 打开vimrc文件对vim进行配置。在这个文件中可以进行很多和vim相关的配置，常用的如下（如果对其他配置感兴趣的可以自己百度）：</p><p><img src="/img/vim1.png" alt=""> </p><h3 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h3><h4 id="1-模式切换"><a href="#1-模式切换" class="headerlink" title="1.模式切换"></a>1.模式切换</h4><p>我们可以将vim分为命令模式、编辑模式和末行模式三种<br><strong>命令模式：</strong>进入vim的时候vim是处于命令模式状态下的，这个时候输入内容不会出现在编辑区  (最末什么都没有)</p><p><strong>末行模式：</strong>在命令模式下输入冒号，让vim进入末行模式。在末行模式的冒号后面可以输入相关的一些指令进行相关操作  (最后有一个冒号)</p><p><strong>编辑模式：</strong>在命令模式下按’i’进入编辑模式。在编辑模式下可以对文件内容进行编辑 (最后 –INSERT– 或者 –插入–)  </p><p>####2.保存和退出<br>在末行模式下输入相应的指令可以对编辑区的内容进行保存和退出vim界面<br><strong>w</strong> – 只保存(类似快捷键ctr+s)<br><strong>q</strong> – 退出（在编辑区的内容全部都保存的情况下才有效）<br><strong>wq</strong> – 保存并退出<br><strong>q!</strong>  – 强制退出（不保存修改信息）    </p><p>####3.光标操作<br>以下光标操作都是在命令模式下输入的<br><strong>^(shift+6)</strong>  – 移动到行首<br><strong>$(shift+4)</strong>  – 移动到行尾<br><strong>G(shift+g)</strong>    – 移动到文件末尾<br><strong>行号G</strong>            – 移动到指定行,例如:30G, 让光标直接跳转到行号是30的那一行<br><strong>gg</strong>                – 移动到文件开头  </p><p>####4.文本操作<br>以下操作不带冒号的是在命令模式下输入，前面有冒号代码后面的内容是在末行模式下输入<br><strong>dd</strong>            – 删除光标所在的行<br><strong>数字dd</strong>        – 从光标所在行开始往后面开始删，删除指定数量行内容<br><strong>:%d</strong>        – 删除所有     </p><p><strong>yy</strong>         – 复制光标所在的行<br><strong>数字yy</strong>        – 从光标所在行开始复制指定行数的内容<br><strong>p</strong>            – 将复制的内容粘贴到光标所在的位置<br><strong>u</strong>            – 撤销<br><strong>ctr+r</strong>    – 反撤销    </p><p><strong>:%!sort</strong>  – 对内容排序  </p><p><strong>:/查找对象[/gice]</strong>    – 搜索匹配正则表达式的内容，按回车回到命令模式后按n往前查找，按N往后查找  </p><p>*<em>:1,$s/被替换对象/替换内容[/gice</em>]*    – 将正则表达式匹配到的内容替换成指定内容   </p><pre><code>-    g: 全局匹配  -     i: 忽略大小写 -   c: 替换时需要提示  -   e: 忽略错误  </code></pre>]]></content>
      
      
      <categories>
          
          <category> vim </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 配置vimrc配置 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Nginx服务器</title>
      <link href="/2018/12/22/Nginx%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%89%E8%A3%85/"/>
      <url>/2018/12/22/Nginx%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h1 id="Nginx服务器"><a href="#Nginx服务器" class="headerlink" title="Nginx服务器"></a>Nginx服务器</h1><h3 id="1-阿里云添加80端口"><a href="#1-阿里云添加80端口" class="headerlink" title="1.阿里云添加80端口"></a>1.阿里云添加80端口</h3><p>阿里云上默认只有一个22端口用来做远程登录，如果希望在阿里云上安装支持http请求的nginx服务器，需要给阿里云添加80端口</p><p><img src="/img/aliyun0.png" alt="打开安全组设置"><br><img src="/img/aliyun2.png" alt=""><br><img src="/img/aliyun3.png" alt=""><br><img src="/img/aliyun4.png" alt=""></p><h3 id="2-安装nginx"><a href="#2-安装nginx" class="headerlink" title="2. 安装nginx"></a>2. 安装nginx</h3><p>a) 添加nginx存储库  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install epel-release</span><br></pre></td></tr></table></figure><p>b) 安装nginx</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install nginx</span><br></pre></td></tr></table></figure><p>c) 运行nginx<br>Nginx不会自行启动。要运行Nginx  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start nginx</span><br></pre></td></tr></table></figure><p>nginx的运行命令:  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl status nginx 查看nginx的状态  </span><br><span class="line">systemctl start/stop/enable/disable nginx 启动/关闭/设置开机启动/禁止开机启动</span><br></pre></td></tr></table></figure><p>d) 系统启动时启动Nginx  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable nginx</span><br></pre></td></tr></table></figure><p>e）如果您正在运行防火墙，请运行以下命令以允许HTTP和HTTPS通信：   </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo firewall-cmd --permanent --zone=public --add-service=http </span><br><span class="line"></span><br><span class="line">sudo firewall-cmd --permanent --zone=public --add-service=https</span><br><span class="line"></span><br><span class="line">sudo firewall-cmd --reload</span><br></pre></td></tr></table></figure><h3 id="3-nginx目录共享配置"><a href="#3-nginx目录共享配置" class="headerlink" title="3.nginx目录共享配置"></a>3.nginx目录共享配置</h3><p>a) 在contOS目录中确定一个需要共享的文件夹，例如： /home/yuting<br>b) 打开 etc/nginx/nginx.conf 文件，设置server</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#共享设置 - 在浏览器中输入服务器ip地址，会展示共享目录的文件列表</span><br><span class="line">root /home/yuting;</span><br><span class="line">location / &#123;</span><br><span class="line">       autoindex on;</span><br><span class="line">       autoindex_exact_size on;</span><br><span class="line">       autoindex_localtime on;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>除了可以共享文件，还可以自定义页面</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#自定义服务器页面</span><br><span class="line">location / &#123;</span><br><span class="line">root /home/yuting;</span><br><span class="line">index index.html index.htm;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意： 如果出现权限问题，可以修改目录的权限  </p><h1 id="ssh密钥认证"><a href="#ssh密钥认证" class="headerlink" title="ssh密钥认证"></a>ssh密钥认证</h1><p>1.在主机和从机上执行：<code>ssh-keygen</code></p><p>2.在从机上执行:  <code>scp  id_rsa.pub  root@主机地址:~/.ssh/master.pub</code><br>(上面这条指令是将从机上的 id_rsa.pub文件拷贝传递给到主机的.ssh文件夹下，并且命名为’master.pub’)</p><p>3.在主机中的.ssh文件夹中创建authorized_keys文件： <code>touch authorized_keys</code> </p><p>4.修改文件authorized_keys的权限: <code>chmod 600  authorized_keys</code>  </p><p>5.将master.pub放进authorized_keys文件中:  <code>cat master.pub &gt;&gt;  authorized_keys</code></p><p>6.在操作主机的时候，需要主机能够自己免密访问自己就将自己的公钥放在自己的authorized_keys文件中</p>]]></content>
      
      
      <categories>
          
          <category> Nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>git常用指令</title>
      <link href="/2018/12/22/git%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/"/>
      <url>/2018/12/22/git%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h1 id="git常用指令"><a href="#git常用指令" class="headerlink" title="git常用指令"></a>git常用指令</h1><h2 id="1-基本指令"><a href="#1-基本指令" class="headerlink" title="1.基本指令"></a>1.基本指令</h2><p><code>git init</code> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ——  新建git仓库<br><code>git add 文件/文件夹</code> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ——  将文件添加到缓存区中<br><code>git add -A</code> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; — 添加所有内容到缓存区中<br><code>git stutas</code> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;———    查看git状态<br><code>git commit -m  ‘提交信息’</code>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;——  将缓存区中的内容全部提交到git本地仓库中  </p><p><code>git log</code>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;——-    查看提交日志  </p><p><code>git reset  - - hard   HEAD</code>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;——   让工作目录中的内容和仓库中的内容保持一致<br><code>git reset  --hard HEAD^</code>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;——  回到上一个版本<br><code>git  reset  - - hard 版本号</code>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;——  回到指定的版本<br><code>git checkout  - -  文件名</code>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ——  从暂存区中恢复工作目录中的内容(让工作区中的指定文件，回到上次提交的时候的状态)  </p><p><code>git clone &lt;url&gt;</code> - 将服务器上的项目(仓库)克隆 (使用https地址需要输入密码，使用ssh地址需要添加公钥)  </p><p><code>git remote add origin 地址</code>      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;—– 关联远程仓库(只需要关联一次)</p><p><code>git push [-u] origin master</code>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;—– 提交(-u在第一次提交分之的时候才用)  </p><h2 id="2-分之管理"><a href="#2-分之管理" class="headerlink" title="2.分之管理"></a>2.分之管理</h2><p>创建仓库会默认给我们创建一个master分之,这个分之一般作为提交和发布分之;开发一般会自己创建一个develop分之，用来开发和测试;多人协作的时候还可能根据不同的人或者(不同的功能)创建不同的分之，用来独立开发  </p><p>常见分之： master(主要是合并develop), develop(主要合并下面的其他分支), 功能/人员分之(开发)  </p><p><code>git branch [-a]</code>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;        - 查看分之<br><code>git branch 分之名</code>        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;- 创建分之<br><code>git checkout   分支名</code>        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-   切换分之<br><code>git checkout -b 分之名</code>        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;    - 切换并创建新的分之<br><code>git diff    分之1  分之2</code>        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;- 查看两个分之之间的差异<br><code>git merge 分之名</code>            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;- 让当前分之和指定分之进行合并     </p><p>注意: 切换分之、push、pull，这些操作前要保证工作区是clean  </p><p>怎么避免冲突：  不要发生多个分之对同一个文件在同一个版本下进行修改(和同伴确认和商量)</p>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git指令 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ssh免密登陆及登陆失败后的解决办法</title>
      <link href="/2018/12/21/ssh%E5%85%8D%E5%AF%86%E7%99%BB%E9%99%86/"/>
      <url>/2018/12/21/ssh%E5%85%8D%E5%AF%86%E7%99%BB%E9%99%86/</url>
      
        <content type="html"><![CDATA[<h4 id="这篇文章主要给大家介绍了关于centos配置ssh免密码登录以及登录后仍要输入密码的解决方法-需要的朋友可以参考下"><a href="#这篇文章主要给大家介绍了关于centos配置ssh免密码登录以及登录后仍要输入密码的解决方法-需要的朋友可以参考下" class="headerlink" title="这篇文章主要给大家介绍了关于centos配置ssh免密码登录以及登录后仍要输入密码的解决方法,需要的朋友可以参考下"></a>这篇文章主要给大家介绍了关于centos配置ssh免密码登录以及登录后仍要输入密码的解决方法,需要的朋友可以参考下</h4><ul><li>首先，我们需要明白为什么要设置SSH免密码登录，其原因是我们在开启服务器的时候需要多次输入yes和root密码，这是我们所不能忍受的，我们迫切需要实现免登录的功能</li></ul><p><font color="#dd0000">第一步：在本机中创建秘钥</font><br><br>1.执行命令：</p><blockquote><p>ssh-keygen -t rsa -C “<a href="mailto:xx@qq.com" target="_blank" rel="noopener">xx@qq.com</a>“<br>(随便编个字符串，一般用邮箱）<br><strong>注意事项</strong><br>2、之后一路回车就行啦；会在～（home）目录下中产生.ssh（隐藏）文件夹；<br>3、里面有两个文件id_rsa(私钥)、id_rsa.pub(公钥)文件<br>注意事项：<br>①在liunx环境下，要想复制公钥或是私钥，不要使用vim等编辑器打开文件来复制粘贴；<br>因为它会产生不必要的回车。<br>②应该使用cat把内容打印到终端上再来复制粘贴；</p><p><font color="#dd0000">第二步：用 ssh-copy-id 把公钥复制到远程主机上</font><br><br>ssh-copy-id <a href="mailto:zhangming@192.168.161.132" target="_blank" rel="noopener">zhangming@192.168.161.132</a><br>把秘钥拷贝到远程服务器</p></blockquote><p>用这种方式拷贝使用的端口是Linux默认的22，如果你想指定端口，可以使用：</p><p>ssh-copy-id -i /用户名/.ssh/id_rsa.pub ‘-p 端口号 用户名@106.75.52.44’</p><blockquote><p>ssh-copy-id -i /root/.ssh/id_rsa.pub ‘-p 22222 <a href="mailto:root@106.75.52.44" target="_blank" rel="noopener">root@106.75.52.44</a>‘<br>这里可能需要等一段时间，反正我是等了挺久的时间，然后显示要你输入密码：</p></blockquote><p><a href="mailto:zhangming@106.75.52.44" target="_blank" rel="noopener">zhangming@106.75.52.44</a>‘s password:<br>输入完密码后，显示：<br>Now try logging into the machine, with “ssh ‘-p 22222 <a href="mailto:root@106.75.52.44" target="_blank" rel="noopener">root@106.75.52.44</a>‘“, and check in:<br> .ssh/authorized_keys<br>to make sure we haven’t added extra keys that you weren’t expecting.<br>表示成功了！</p><p><font color="#dd0000">第三步：远程登入</font><br></p><blockquote><p>[zhangming@localhost ~]$ ssh <a href="mailto:zhangming@192.168.161.134" target="_blank" rel="noopener">zhangming@192.168.161.134</a><br>Last login: Mon Oct 10 14:18:54 2016 from 192.168.161.135<br>ssh <a href="mailto:zhangming@123.59.44.56" target="_blank" rel="noopener">zhangming@123.59.44.56</a> -p 22222</p></blockquote><p> <strong>注意</strong><br> 遇到的大坑：<br>配置ssh免密码登录后，仍提示输入密码</p><blockquote><p>解决方法：<br>首先我们就要去查看系统的日志文件<br>cat /var/log/secure </p></blockquote><p>发现问题的所在：Authentication refused: bad ownership or modes for file<br>从字面上可以看出是目录的属主和权限配置不当，查找资料得知：SSH不希望home目录和~/.ssh目录对组有写权限，通过下面几条命令改下</p><blockquote><p>g-w /home/zhangming<br>chmod 700 /home/zhangming/.ssh<br>chmod 600 /home/zhangming/.ssh/authorized_keys<br>然后我们再去登录，就能不用密码进入了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ssh </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hello World</title>
      <link href="/2018/12/19/hello-world/"/>
      <url>/2018/12/19/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> Diary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hello </tag>
            
            <tag> World </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
